/*
 * Copyright 2022-2024 benelog GmbH & Co. KG
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */
package io.openepcis.rest.api.common;

import io.openepcis.model.rest.ProblemResponseBody;
import io.openepcis.rest.api.common.constants.ParameterDescriptions;
import io.openepcis.rest.api.common.constants.ResponseBodyExamples;
import io.openepcis.rest.api.common.filter.EPCISClientRequestFilter;
import io.smallrye.mutiny.Uni;
import jakarta.annotation.security.RolesAllowed;
import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.ParameterIn;
import org.eclipse.microprofile.openapi.annotations.headers.Header;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;
import org.eclipse.microprofile.openapi.annotations.parameters.Parameters;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;
import org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement;
import org.eclipse.microprofile.openapi.annotations.tags.Tag;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import org.jboss.resteasy.reactive.RestPath;
import org.jboss.resteasy.reactive.RestQuery;

import java.util.UUID;

import static io.openepcis.rest.api.common.constants.ParameterConstants.*;

@Tag(name = "Capture", description = "Endpoints to capture EPCIS events in bulk or individually.")
@Path("capture")
@RegisterRestClient(configKey = "epcis-api")
@RegisterProvider(EPCISClientRequestFilter.class)
public interface CaptureJobApi {

    @Operation(
            summary = "Returns information about the capture job.",
            description =
                    "When EPCIS events are added through the capture interface, the capture process can run asynchronously. If the payload"
                            + "is syntactically correct and the client is allowed to call `/capture`, the server returns a `202` HTTP response code. "
                            + "This endpoint exposes the state of the capture job to the client.")
    @Parameters(
            value = {
                    @Parameter(
                            name = "captureID",
                            description =
                                    "A unique value identifying a " + "capture job generated by the server.",
                            in = ParameterIn.PATH,
                            required = true),
                    @Parameter(
                            name = "GS1-EPCIS-Min",
                            description = ParameterDescriptions.GS1_EPCIS_MIN,
                            in = ParameterIn.HEADER,
                            content = @Content(example = DEFAULT_EPCIS_MIN_PARAMETER_VALUE)),
                    @Parameter(
                            name = "GS1-EPCIS-Max",
                            description = ParameterDescriptions.GS1_EPCIS_MAX,
                            in = ParameterIn.HEADER,
                            content = @Content(example = DEFAULT_EPCIS_MAX_PARAMETER_VALUE)),
                    @Parameter(
                            name = "GS1-Extensions",
                            description = ParameterDescriptions.GS1_EXTENSIONS,
                            in = ParameterIn.HEADER)
            }
    )
    @APIResponses(
            value = {
                    @APIResponse(
                            responseCode = "200",
                            description =
                                    "A capture job document has at least the following properties:\n"
                                            + "- `running`: whether or not the capture job is still active.\n"
                                            + "- `success`: whether or not at least one error occurred.\n"
                                            + "- `captureErrorBehaviour`: GS1-Capture-Error-Behaviour header value provided with POST data to capture.\n"
                                            + "- `errors` or `errorFile`: with the errors if `success` is `false`.\n"
                                            + "### captureErrorBehaviour value is `rollback`\n"
                                            + "| Capture job `running` | Capture job `success` | Capture job outcome |\n"
                                            + "|:--------|:---------|:---------| \n"
                                            + "| `true` | `true` | Still capturing EPCIS events. No errors occurred so far. |\n"
                                            + "| `true` | `false` | At least one error occurred. Rollback is in progress. |\n"
                                            + "| `false` | `true` | All EPCIS events are captured. |\n"
                                            + "| `false` | `false` | All EPCIS events are rejected. |\n"
                                            + "### captureErrorBehaviour value is `proceed`\n"
                                            + "| Capture job `running` | Capture job `success` | Capture job outcome |\n"
                                            + "|:--------|:---------|:---------|\n"
                                            + "| `true` | `true` | Still capturing EPCIS events. No errors occurred so far. |\n"
                                            + "| `true` | `false` | At least one error occurred but more EPCIS events are currently being captured. |\n"
                                            + "| `false` | `true` | All EPCIS events were captured without an error. |\n"
                                            + "| `false` | `false` | Some EPCIS events were captured but errors occurred. |\n"
                                            + "If `success` is `false`, check the `errors` or `errorFile` property for details.",
                            content =
                            @Content(
                                    example =
                                            "{\n"
                                                    + "  \"captureID\": \"id261378658356\",\n"
                                                    + "  \"createdAt\": \"2021-07-21T17:32:28Z\",\n"
                                                    + "  \"finishedAt\" : \"2022-01-21T17:45:28Z\",\n"
                                                    + "  \"running\": false,\n"
                                                    + "  \"success\": true,\n"
                                                    + "  \"captureErrorBehaviour\": \"rollback\",\n"
                                                    + "  \"errors\": [ ]\n"
                                                    + "}"),
                            headers = {
                                    @Header(
                                            name = "GS1-EPCIS-Version",
                                            description = ParameterDescriptions.GS1_EPCIS_VERSION,
                                            schema = @Schema(implementation = Object.class)),
                                    @Header(
                                            name = "GS1-Extensions",
                                            description = ParameterDescriptions.GS1_EXTENSIONS,
                                            schema = @Schema(implementation = Object.class)),
                            }),
                    @APIResponse(
                            responseCode = "401",
                            description = "Authorization information is missing or invalid.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_401_UNAUTHORIZED_REQUEST)),
                    @APIResponse(
                            responseCode = "403",
                            description = "Client is unauthorized to access this resource.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_403_CLIENT_UNAUTHORIZED)),
                    @APIResponse(
                            responseCode = "404",
                            description = "Capture job not found",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_404_RESOURCE_NOT_FOUND)),
                    @APIResponse(
                            responseCode = "406",
                            description = "The server cannot return the response as requested.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_406_NOT_ACCEPTABLE)),
                    @APIResponse(
                            responseCode = "500",
                            description = "An error occurred on the backend.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_500_IMPLEMENTATION_EXCEPTION))
            })
    @GET
    @Path("{captureID}")
    @Produces({
            MediaType.APPLICATION_JSON,
            MediaType.APPLICATION_XML,
            MediaType.TEXT_XML,
            "application/problem+json",
            "application/ld+json"
    })
    @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML, MediaType.APPLICATION_XML, "application/ld+json"})
    public Uni<Response> captureIDGet(
            @RestPath UUID captureID);

    @Operation(
            summary = "Returns a list of capture jobs.",
            description =
                    "When EPCIS events are added through the capture interface, the capture process can run asynchronously. If the payload"
                            + "is syntactically correct and the client is allowed to call `/capture`, the server returns a `202` HTTP response code. "
                            + "This endpoint returns all capture jobs that were created and supports pagination.")
    @Parameters(
            value = {
                    @Parameter(
                            name = "perPage",
                            description = ParameterDescriptions.PER_PAGE,
                            in = ParameterIn.QUERY),
                    @Parameter(
                            name = "nextPageToken",
                            description = ParameterDescriptions.NEXT_PAGE_TOKEN,
                            in = ParameterIn.QUERY,
                            content = @Content(example = "3A15506738749783AU6D7DENAKwM2gQRRwGritaeq")),
                    @Parameter(
                            name = "GS1-EPCIS-Min",
                            description = ParameterDescriptions.GS1_EPCIS_MIN,
                            in = ParameterIn.HEADER,
                            content = @Content(example = DEFAULT_EPCIS_MIN_PARAMETER_VALUE)),
                    @Parameter(
                            name = "GS1-EPCIS-Max",
                            description = ParameterDescriptions.GS1_EPCIS_MAX,
                            in = ParameterIn.HEADER,
                            content = @Content(example = DEFAULT_EPCIS_MAX_PARAMETER_VALUE)),
                    @Parameter(
                            name = "GS1-Extensions",
                            description = ParameterDescriptions.GS1_EXTENSIONS,
                            in = ParameterIn.HEADER)
            }
    )
    @APIResponses(
            value = {
                    @APIResponse(
                            responseCode = "200",
                            description =
                                    "A capture job document has at least the following properties:\n"
                                            + "- `running`: whether or not the capture job is still active.\n"
                                            + "- `success`: whether or not at least one error occurred.\n"
                                            + "- `captureErrorBehaviour`: GS1-Capture-Error-Behaviour header value provided with POST data to capture.\n"
                                            + "- `errors` or `errorFile`: with the errors if `success` is `false`.\n"
                                            + "### captureErrorBehaviour value is `rollback`\n"
                                            + "| Capture job `running` | Capture job `success` | Capture job outcome |\n"
                                            + "|:--------|:---------|:---------|\n"
                                            + "| `true` | `true` | Still capturing EPCIS events. No errors occurred so far. |\n"
                                            + "| `true` | `false` | At least one error occurred. Rollback is in progress. |\n"
                                            + "| `false` | `true` | All EPCIS events are captured. |\n"
                                            + "| `false` | `false` | All EPCIS events are rejected. |\n"
                                            + "### captureErrorBehaviour value is `proceed`\n"
                                            + "| Capture job `running` | Capture job `success` | Capture job outcome |\n"
                                            + "|:--------|:---------|:---------|\n"
                                            + "| `true` | `true` | Still capturing EPCIS events. No errors occurred so far. |\n"
                                            + "| `true` | `false` | At least one error occurred but more EPCIS events are currently being captured. |\n"
                                            + "| `false` | `true` | All EPCIS events were captured without an error. |\n"
                                            + "| `false` | `false` | Some EPCIS events were captured but errors occurred. |\n"
                                            + "If `success` is `false`, check the `errors` or `errorFile` property for details.",
                            content =
                            @Content(
                                    example =
                                            "[\n"
                                                    + "{\n"
                                                    + "  \"captureID\": \"id261378658356\",\n"
                                                    + "  \"createdAt\": \"2021-07-21T17:32:28Z\",\n"
                                                    + "  \"finishedAt\" : \"2022-01-21T17:45:28Z\",\n"
                                                    + "  \"running\": false,\n"
                                                    + "  \"success\": true,\n"
                                                    + "  \"captureErrorBehaviour\": \"rollback\",\n"
                                                    + "  \"errors\": [ ]\n"
                                                    + "},\n"
                                                    + "{\n"
                                                    + "  \"captureID\": \"id9261379075\",\n"
                                                    + "  \"createdAt\": \"2021-08-21T17:32:28Z\",\n"
                                                    + "  \"running\": true,\n"
                                                    + "  \"success\": true,\n"
                                                    + "  \"captureErrorBehaviour\": \"proceed\",\n"
                                                    + "  \"errors\": [ ]\n"
                                                    + "}]"),
                            headers = {
                                    @Header(
                                            name = "GS1-EPCIS-version",
                                            description = ParameterDescriptions.GS1_EPCIS_VERSION,
                                            schema = @Schema(implementation = String.class)),
                                    @Header(
                                            name = "GS1-Extensions",
                                            description = ParameterDescriptions.GS1_EXTENSIONS,
                                            schema = @Schema(implementation = String.class)),
                                    @Header(
                                            name = "Link",
                                            description = ParameterDescriptions.LINK,
                                            schema = @Schema(implementation = String.class)),
                                    @Header(
                                            name = "GS1-Next-Page-Token-Expires",
                                            description = ParameterDescriptions.GS1_NEXT_PAGE_TOKEN_EXPIRES,
                                            schema = @Schema(implementation = String.class))
                            }),
                    @APIResponse(
                            responseCode = "401",
                            description = "Authorization information is missing or invalid.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_401_UNAUTHORIZED_REQUEST)),
                    @APIResponse(
                            responseCode = "403",
                            description = "Client is unauthorized to access this resource.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_403_CLIENT_UNAUTHORIZED)),
                    @APIResponse(
                            responseCode = "406",
                            description = "The server cannot return the response as requested.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_406_NOT_ACCEPTABLE)),
                    @APIResponse(
                            responseCode = "500",
                            description = "An error occurred on the backend.",
                            content =
                            @Content(
                                    schema = @Schema(implementation = ProblemResponseBody.class),
                                    example = ResponseBodyExamples.RESPONSE_500_IMPLEMENTATION_EXCEPTION))
            })
    @GET
    @Produces({
            MediaType.APPLICATION_JSON,
            MediaType.APPLICATION_XML,
            MediaType.TEXT_XML,
            "application/problem+json",
            "application/ld+json"
    })
    @Consumes({MediaType.APPLICATION_JSON, "application/ld+json",
            MediaType.APPLICATION_XML,
            MediaType.TEXT_XML})
    public Uni<Response> captureGet(
            @Valid
            @RestQuery
            @DefaultValue(DEFAULT_PER_PAGE_PARAMETER_VALUE)
            Integer perPage,
            @Valid
            @RestQuery
            String nextPageToken);
}
